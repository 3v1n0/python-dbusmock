#!/usr/bin/python3

import unittest
import sys
import time
import tempfile
import subprocess

import dbus_mock

from gi.repository import Gio, GLib

class TestAPI(dbus_mock.DBusTestCase):
    '''Test dbus-mock API'''

    @classmethod
    def setUpClass(klass):
        klass.start_session_bus()
        klass.dbus_con = Gio.bus_get_sync(Gio.BusType.SESSION, None)

    def setUp(self):
        self.mock_log = tempfile.NamedTemporaryFile()
        self.p_mock = self.spawn_server('org.freedesktop.Test',
                                        '/',
                                        'org.freedesktop.Test.Main',
                                        stdout=self.mock_log)

        self.dbus_test = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/', 'org.freedesktop.Test.Main', None)

        self.dbus_mock = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/', 'org.freedesktop.DBus.Mock', None)

        self.dbus_props = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/', 'org.freedesktop.DBus.Properties', None)

    def tearDown(self):
        self.p_mock.terminate()
        self.p_mock.wait()

    def test_noarg_noret(self):
        '''no arguments, no return value'''

        self.dbus_mock.AddMethod('(ssss)', 'Do', '', '', '')

        self.assertEqual(self.dbus_test.Do(), None)

        # check that it's logged correctly
        with open(self.mock_log.name) as f:
            self.assertRegex(f.read(), '^[0-9.]+ Do$')

    def test_onearg_noret(self):
        '''one argument, no return value'''

        self.dbus_mock.AddMethod('(ssss)', 'Do', 's', '', '')

        self.assertEqual(self.dbus_test.Do('(s)', 'Hello'), None)

    def test_onearg_ret(self):
        '''one argument, code for return value'''

        self.dbus_mock.AddMethod('(ssss)', 'Do', 's', 's', 'ret = args[0]')
        self.assertEqual(self.dbus_test.Do('(s)', 'Hello'), 'Hello')

    def test_twoarg_ret(self):
        '''two arguments, code for return value'''

        self.dbus_mock.AddMethod('(ssss)', 'Do', 'si', 's', 'ret = args[0] * args[1]')
        self.assertEqual(self.dbus_test.Do('(si)', 'foo', 3), 'foofoofoo')

    def test_add_object(self):
        '''add a new object'''

        self.dbus_mock.AddObject('(ssa{sv}a(ssss))',
                                 '/obj1',
                                 'org.freedesktop.Test.Sub',
                                 {
                                     'state': GLib.Variant('s', 'online'),
                                     'cute': GLib.Variant('b', 'True'),
                                 },
                                 [])

        self.dbus_obj1 = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/obj1', 'org.freedesktop.Test.Sub', None)

        # check properties
        self.dbus_obj1_props = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/obj1', 'org.freedesktop.DBus.Properties', None)
        self.assertEqual(self.dbus_obj1_props.Get('(ss)', 'org.freedesktop.Test.Sub', 'state'),
                         'online')
        self.assertEqual(self.dbus_obj1_props.Get('(ss)', 'org.freedesktop.Test.Sub', 'cute'),
                         True)
        self.assertEqual(self.dbus_obj1_props.GetAll('(s)', 'org.freedesktop.Test.Sub'),
                         {'state': 'online', 'cute': True})

        # add new method
        self.dbus_obj1_mock = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/obj1', 'org.freedesktop.DBus.Mock', None)
        self.dbus_obj1_mock.AddMethod('(ssss)', 'Do', '', 's', 'ret = "hello"')
        self.assertEqual(self.dbus_obj1.Do(), 'hello')

    def test_properties(self):
        '''add and change properties'''

        # no such property
        self.assertRaises(GLib.GError,
                          self.dbus_props.Get,
                          '(ss)',
                          'org.freedesktop.Test.Main',
                          'version')
        self.assertRaises(GLib.GError,
                          self.dbus_props.Set,
                          '(ssv)',
                          'org.freedesktop.Test.Main',
                          'version',
                          GLib.Variant('i', 2))

        self.dbus_mock.AddProperty('(ssv)',
                                   'org.freedesktop.Test.Main',
                                   'version',
                                   GLib.Variant('i', 2))

        self.assertEqual(self.dbus_props.Get('(ss)', 'org.freedesktop.Test.Main', 'version'),
                         2)

        # change property
        self.dbus_props.Set('(ssv)', 'org.freedesktop.Test.Main', 'version',
                            GLib.Variant('i', 4))
        self.assertEqual(self.dbus_props.Get('(ss)', 'org.freedesktop.Test.Main', 'version'),
                         4)


class TestUPower(dbus_mock.DBusTestCase):
    '''Test mocking upowerd'''

    @classmethod
    def setUpClass(klass):
        klass.start_system_bus()
        klass.dbus_con = Gio.bus_get_sync(Gio.BusType.SYSTEM, None)

    def setUp(self):
        self.mock_log = tempfile.NamedTemporaryFile()
        self.p_mock = self.spawn_server('org.freedesktop.UPower',
                                        '/org/freedesktop/UPower',
                                        'org.freedesktop.UPower',
                                        system_bus=True,
                                        stdout=self.mock_log)

        self.dbus_upower = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.UPower', '/org/freedesktop/UPower',
            'org.freedesktop.UPower', None)

        self.dbus_mock = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.UPower', '/org/freedesktop/UPower',
            'org.freedesktop.DBus.Mock', None)

        self.dbus_mock.AddMethod('(ssss)', 'Suspend', '', '', '')
        self.dbus_mock.AddMethod('(ssss)', 'EnumerateDevices', '', 'ao',
                                 'ret = objects.keys()')

    def tearDown(self):
        self.p_mock.terminate()
        self.p_mock.wait()

    def test_no_devices(self):
        out = subprocess.check_output(['upower', '--dump'], universal_newlines=True)
        self.assertFalse('Device' in out, out)
        self.assertRegex(out, 'on-battery:\s+no')

    def test_one_ac(self):
        self.dbus_mock.AddObject('(ssa{sv}a(ssss))',
                                 '/org/freedesktop/UPower/devices/mock_AC',
                                 'org.freedesktop.UPower.Device',
                                 {
                                     'PowerSupply': GLib.Variant('b', True),
                                     'Model': GLib.Variant('s', 'Mock AC'),
                                 },
                                 [])

        out = subprocess.check_output(['upower', '--dump'], universal_newlines=True)
        self.assertRegex(out, 'Device: /org/freedesktop/UPower/devices/mock_AC')
        self.assertRegex(out, 'on-battery:\s+no')
        #print('--------- out --------\n%s\n------------' % out)

    def test_suspend(self):
        self.dbus_upower.Suspend()
        with open(self.mock_log.name) as f:
            self.assertRegex(f.read(), '^[0-9.]+ Suspend$')

class TestConsoleKit(dbus_mock.DBusTestCase):
    @classmethod
    def setUpClass(klass):
        klass.start_system_bus()
        klass.dbus_con = Gio.bus_get_sync(Gio.BusType.SYSTEM, None)

    def setUp(self):
        self.p_mock = self.spawn_server('org.freedesktop.ConsoleKit',
                                        '/org/freedesktop/ConsoleKit/Manager',
                                        'org.freedesktop.ConsoleKit.Manager',
                                        system_bus=True,
                                        stdout=subprocess.PIPE)

        self.dbus_manager = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.ConsoleKit', '/org/freedesktop/ConsoleKit/Manager',
            'org.freedesktop.ConsoleKit.Manager', None)

        self.dbus_mock = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.ConsoleKit', '/org/freedesktop/ConsoleKit/Manager',
            'org.freedesktop.DBus.Mock', None)

    def tearDown(self):
        self.p_mock.terminate()
        self.p_mock.wait()

    def test_one_active_session(self):
        self.dbus_mock.AddMethods('(a(ssss))', (
            ('GetSessions', '', 'ao', 'ret = ["/org/freedesktop/ConsoleKit/MockSession"]'),
            ('GetCurrentSession', '', 'o', 'ret = "/org/freedesktop/ConsoleKit/MockSession"'),
            ('GetSeats', '', 'ao', 'ret = ["/org/freedesktop/ConsoleKit/MockSeat"]'),
        ))

        self.dbus_mock.AddObject('(ssa{sv}a(ssss))',
                                 '/org/freedesktop/ConsoleKit/MockSeat',
                                 'org.freedesktop.ConsoleKit.Seat',
                                 {},
                                 [])
        self.dbus_seat_mock = Gio.DBusProxy.new_sync(
            self.dbus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.ConsoleKit', '/org/freedesktop/ConsoleKit/MockSeat',
            'org.freedesktop.DBus.Mock', None)
        self.dbus_seat_mock.AddMethod('(ssss)', 'GetSessions', '', 'ao',
                                 'ret = ["/org/freedesktop/ConsoleKit/MockSession"]')

        self.dbus_mock.AddObject('(ssa{sv}a(ssss))',
                                 '/org/freedesktop/ConsoleKit/MockSession',
                                 'org.freedesktop.ConsoleKit.Session',
                                 {},
                                 [
                                     ('GetSeatId', '', 'o', 'ret = "/org/freedesktop/ConsoleKit/MockSeat"'),
                                     ('GetUnixUser', '', 'u', 'ret = os.geteuid()'),
                                     ('GetCreationTime', '', 's', 'ret = "2012-01-01T01:23:45.600000Z"'),
                                     ('GetIdleSinceHint', '', 's', 'ret = "2012-01-01T02:23:45.600000Z"'),
                                     ('IsLocal', '', 'b', 'ret = True'),
                                     ('IsActive', '', 'b', 'ret = True'),
                                     ('GetDisplayDevice', '', 's', 'ret = ""'),
                                     ('GetX11DisplayDevice', '', 's', 'ret = "/dev/tty7"'),
                                     ('GetX11Display', '', 's', 'ret = os.environ.get("DISPLAY", "95:0")'),
                                     ('GetRemoteHostName', '', 's', 'ret = ""'),
                                     ('GetSessionType', '', 's', 'ret = ""'),
                                     ('GetLoginSessionId', '', 's', 'ret = "12345"'),
                                 ])

        out = subprocess.check_output(['ck-list-sessions'], universal_newlines=True)
        self.assertRegex(out, '^MockSession:')
        self.assertRegex(out, 'is-local = TRUE')
        self.assertRegex(out, "login-session-id = '12345'")

# avoid writing to stderr
unittest.main(testRunner=unittest.TextTestRunner(stream=sys.stdout, verbosity=2))
