#!/usr/bin/python3

import subprocess
import unittest
import os
import os.path
import signal
import sys
import time
import tempfile

from gi.repository import Gio, GLib

class DBusTestCase(unittest.TestCase):
    '''Base class for D-BUS mock tests'''

    @classmethod
    def setUpClass(klass):
        # set up a fake session bus
        (klass.session_bus_pid, addr) = klass.start_dbus()
        os.environ['DBUS_SESSION_BUS_ADDRESS'] = addr
        klass.session_bus_con = Gio.bus_get_sync(Gio.BusType.SESSION, None)

        # set up a fake system bus
        (klass.system_bus_pid, addr) = klass.start_dbus()
        os.environ['DBUS_SYSTEM_BUS_ADDRESS'] = addr
        klass.system_bus_con = Gio.bus_get_sync(Gio.BusType.SYSTEM, None)

    @classmethod
    def tearDownClass(klass):
        klass.stop_dbus(klass.session_bus_pid)
        klass.stop_dbus(klass.system_bus_pid)

    @classmethod
    def start_dbus(klass):
        '''Start a D-BUS daemon.

        Return (pid, address) pair.
        '''
        out = subprocess.check_output(['dbus-launch'], universal_newlines=True)
        variables = {}
        for line in out.splitlines():
            (k, v) = line.split('=', 1)
            variables[k] = v
        return (int(variables['DBUS_SESSION_BUS_PID']),
                variables['DBUS_SESSION_BUS_ADDRESS'])

    @classmethod
    def stop_dbus(klass, pid):
        '''Stop a D-BUS daemon'''

        os.kill(pid, signal.SIGTERM)
        try:
            os.waitpid(pid, 0)
        except OSError:
            pass

    @classmethod
    def wait_for_bus_object(klass, con, dest, path):
        '''Wait for an object to appear on D-BUS
        
        Raise an exception if object does not appear within 5 seconds.
        '''
        timeout = 50
        while timeout > 0:
            try:
                p = Gio.DBusProxy.new_sync(
                    con,
                    Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
                    dest, path,
                    'org.freedesktop.DBus.Introspectable',
                    None)
                p.Introspect()
                break
            except GLib.GError as e:
                pass
            timeout -= 1
            time.sleep(0.1)
        if timeout <= 0:
            assert timeout > 0, 'timed out waiting for D-BUS object %s' % path

class TestAPI(DBusTestCase):
    '''Test dbus-mock API'''

    def setUp(self):
        self.mock_log = tempfile.NamedTemporaryFile()
        self.p_mock = subprocess.Popen([os.path.join(os.path.dirname(__file__), 'dbus-mock'),
                                        '--system', 'org.freedesktop.Test',
                                       '/',
                                        'org.freedesktop.Test.Main'],
                                        stdout=self.mock_log)
        self.wait_for_bus_object(self.system_bus_con, 'org.freedesktop.Test', '/')

        self.dbus_test = Gio.DBusProxy.new_sync(
            self.system_bus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/', 'org.freedesktop.Test.Main', None)

        self.dbus_mock = Gio.DBusProxy.new_sync(
            self.system_bus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/', 'org.freedesktop.DBus.Mock', None)

        self.dbus_props = Gio.DBusProxy.new_sync(
            self.system_bus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/', 'org.freedesktop.DBus.Properties', None)

    def tearDown(self):
        self.p_mock.terminate()
        self.p_mock.wait()

    def test_noarg_noret(self):
        '''no arguments, no return value'''

        self.dbus_mock.AddMethod('(ssss)', 'Do', '', '', '')

        self.assertEqual(self.dbus_test.Do(), None)

    def test_onearg_noret(self):
        '''one argument, no return value'''

        self.dbus_mock.AddMethod('(ssss)', 'Do', 's', '', '')

        self.assertEqual(self.dbus_test.Do('(s)', 'Hello'), None)

    def test_onearg_ret(self):
        '''one argument, code for return value'''

        self.dbus_mock.AddMethod('(ssss)', 'Do', 's', 's', 'ret = args[0]')
        self.assertEqual(self.dbus_test.Do('(s)', 'Hello'), 'Hello')

    def test_twoarg_ret(self):
        '''two arguments, code for return value'''

        self.dbus_mock.AddMethod('(ssss)', 'Do', 'si', 's', 'ret = args[0] * args[1]')
        self.assertEqual(self.dbus_test.Do('(si)', 'foo', 3), 'foofoofoo')

    def test_add_object(self):
        '''add a new object'''

        self.dbus_mock.AddObject('(ssa{sv}',
                                 '/obj1',
                                 'org.freedesktop.Test.Sub',
                                 {
                                     'state': GLib.Variant('s', 'online'),
                                     'cute': GLib.Variant('b', 'True'),
                                 })

        self.dbus_obj1 = Gio.DBusProxy.new_sync(
            self.system_bus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/obj1', 'org.freedesktop.Test.Sub', None)

        # check properties
        self.dbus_obj1_props = Gio.DBusProxy.new_sync(
            self.system_bus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/obj1', 'org.freedesktop.DBus.Properties', None)
        self.assertEqual(self.dbus_obj1_props.Get('(ss)', 'org.freedesktop.Test.Sub', 'state'),
                         'online')
        self.assertEqual(self.dbus_obj1_props.Get('(ss)', 'org.freedesktop.Test.Sub', 'cute'),
                         True)
        self.assertEqual(self.dbus_obj1_props.GetAll('(s)', 'org.freedesktop.Test.Sub'),
                         {'state': 'online', 'cute': True})

        # add new method
        self.dbus_obj1_mock = Gio.DBusProxy.new_sync(
            self.system_bus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.Test', '/obj1', 'org.freedesktop.DBus.Mock', None)
        self.dbus_obj1_mock.AddMethod('(ssss)', 'Do', '', 's', 'ret = "hello"')
        self.assertEqual(self.dbus_obj1.Do(), 'hello')

    def test_properties(self):
        '''add and change properties'''

        # no such property
        self.assertRaises(GLib.GError,
                          self.dbus_props.Get,
                          '(ss)',
                          'org.freedesktop.Test.Main',
                          'version')
        self.assertRaises(GLib.GError,
                          self.dbus_props.Set,
                          '(ssv)',
                          'org.freedesktop.Test.Main',
                          'version',
                          GLib.Variant('i', 2))

        self.dbus_mock.AddProperty('(ssv)',
                                   'org.freedesktop.Test.Main',
                                   'version',
                                   GLib.Variant('i', 2))

        self.assertEqual(self.dbus_props.Get('(ss)', 'org.freedesktop.Test.Main', 'version'),
                         2)

        # change property
        self.dbus_props.Set('(ssv)', 'org.freedesktop.Test.Main', 'version',
                            GLib.Variant('i', 4))
        self.assertEqual(self.dbus_props.Get('(ss)', 'org.freedesktop.Test.Main', 'version'),
                         4)


class TestUPower(DBusTestCase):
    '''Test mocking upowerd'''

    def setUp(self):
        self.mock_log = tempfile.NamedTemporaryFile()
        self.p_mock = subprocess.Popen([os.path.join(os.path.dirname(__file__), 'dbus-mock'),
                                        '--system', 'org.freedesktop.UPower',
                                       '/org/freedesktop/UPower',
                                        'org.freedesktop.UPower'],
                                        stdout=self.mock_log)
        self.wait_for_bus_object(self.system_bus_con,
                                  'org.freedesktop.UPower',
                                  '/org/freedesktop/UPower')

        self.dbus_upower = Gio.DBusProxy.new_sync(
            self.system_bus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.UPower', '/org/freedesktop/UPower',
            'org.freedesktop.UPower', None)

        self.dbus_mock = Gio.DBusProxy.new_sync(
            self.system_bus_con, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None,
            'org.freedesktop.UPower', '/org/freedesktop/UPower',
            'org.freedesktop.DBus.Mock', None)

        self.dbus_mock.AddMethod('(ssss)', 'Suspend', '', '', '')
        self.dbus_mock.AddMethod('(ssss)', 'EnumerateDevices', '', 'ao',
                                 'ret = objects.keys()')

    def tearDown(self):
        self.p_mock.terminate()
        self.p_mock.wait()

    def test_no_devices(self):
        out = subprocess.check_output(['upower', '--dump'], universal_newlines=True)
        self.assertFalse('Device' in out, out)
        self.assertRegex(out, 'on-battery:\s+no')

    def test_one_ac(self):
        self.dbus_mock.AddObject('(ssa{sv}',
                                 '/org/freedesktop/UPower/devices/mock_AC',
                                 'org.freedesktop.UPower.Device',
                                 {
                                     'PowerSupply': GLib.Variant('b', True),
                                     'Model': GLib.Variant('s', 'Mock AC'),
                                 })

        out = subprocess.check_output(['upower', '--dump'], universal_newlines=True)
        self.assertRegex(out, 'Device: /org/freedesktop/UPower/devices/mock_AC')
        self.assertRegex(out, 'on-battery:\s+no')
        #print('--------- out --------\n%s\n------------' % out)

    def test_suspend(self):
        self.dbus_upower.Suspend()
        with open(self.mock_log.name) as f:
            self.assertRegex(f.read(), '^[0-9.]+ Suspend$')

# avoid writing to stderr
unittest.main(testRunner=unittest.TextTestRunner(stream=sys.stdout, verbosity=2))


