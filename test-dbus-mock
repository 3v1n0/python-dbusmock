#!/usr/bin/python3

# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option) any
# later version.  See http://www.gnu.org/copyleft/lgpl.html for the full text
# of the license.

__author__ = 'Martin Pitt'
__email__  = 'martin.pitt@ubuntu.com'
__copyright__ = '(c) 2012 Canonical Ltd.'
__license__ = 'LGPL 3+'

import unittest
import sys
import time
import tempfile
import subprocess

import dbus

import dbus_mock

class TestAPI(dbus_mock.DBusTestCase):
    '''Test dbus-mock API'''

    @classmethod
    def setUpClass(klass):
        klass.start_session_bus()
        klass.dbus_con = klass.get_dbus()

    def setUp(self):
        self.mock_log = tempfile.NamedTemporaryFile()
        self.p_mock = self.spawn_server('org.freedesktop.Test',
                                        '/',
                                        'org.freedesktop.Test.Main',
                                        stdout=self.mock_log)

        self.obj_test = self.dbus_con.get_object('org.freedesktop.Test', '/')
        self.dbus_test = dbus.Interface(self.obj_test, 'org.freedesktop.Test.Main')
        self.dbus_mock = dbus.Interface(self.obj_test, 'org.freedesktop.DBus.Mock')
        self.dbus_props = dbus.Interface(self.obj_test, dbus.PROPERTIES_IFACE)

    def tearDown(self):
        self.p_mock.terminate()
        self.p_mock.wait()

    def test_noarg_noret(self):
        '''no arguments, no return value'''

        self.dbus_mock.AddMethod('Do', '', '', '')
        self.assertEqual(self.dbus_test.Do(), None)

        # check that it's logged correctly
        with open(self.mock_log.name) as f:
            self.assertRegex(f.read(), '^[0-9.]+ Do$')

    def test_onearg_noret(self):
        '''one argument, no return value'''

        self.dbus_mock.AddMethod('Do', 's', '', '')
        self.assertEqual(self.dbus_test.Do('Hello'), None)

    def test_onearg_ret(self):
        '''one argument, code for return value'''

        self.dbus_mock.AddMethod('Do', 's', 's', 'ret = args[0]')
        self.assertEqual(self.dbus_test.Do('Hello'), 'Hello')

    def test_twoarg_ret(self):
        '''two arguments, code for return value'''

        self.dbus_mock.AddMethod('Do', 'si', 's', 'ret = args[0] * args[1]')
        self.assertEqual(self.dbus_test.Do('foo', 3), 'foofoofoo')

    def test_add_object(self):
        '''add a new object'''

        self.dbus_mock.AddObject('/obj1',
                                 'org.freedesktop.Test.Sub',
                                 {
                                     'state': dbus.String('online', variant_level=1),
                                     'cute': dbus.Boolean(True, variant_level=1),
                                 },
                                 [])

        obj1 = self.dbus_con.get_object('org.freedesktop.Test', '/obj1')
        dbus_sub = dbus.Interface(obj1, 'org.freedesktop.Test.Sub')
        dbus_props = dbus.Interface(obj1, dbus.PROPERTIES_IFACE)
        dbus_mock = dbus.Interface(obj1, 'org.freedesktop.DBus.Mock')

        # check properties
        self.assertEqual(dbus_props.Get('org.freedesktop.Test.Sub', 'state'), 'online')
        self.assertEqual(dbus_props.Get('org.freedesktop.Test.Sub', 'cute'), True)
        self.assertEqual(dbus_props.GetAll('org.freedesktop.Test.Sub'),
                         {'state': 'online', 'cute': True})

        # add new method
        dbus_mock.AddMethod('Do', '', 's', 'ret = "hello"')
        self.assertEqual(dbus_sub.Do(), 'hello')

    def test_add_object_with_methods(self):
        '''add a new object with methods'''

        self.dbus_mock.AddObject('/obj1',
                                 'org.freedesktop.Test.Sub',
                                 {
                                     'state': dbus.String('online', variant_level=1),
                                     'cute': dbus.Boolean(True, variant_level=1),
                                 },
                                 [
                                     ('Do0', '', 'i', 'ret = 42'),
                                     ('Do1', 'i', 'i', 'ret = 31337'),
                                 ])

        obj1 = self.dbus_con.get_object('org.freedesktop.Test', '/obj1')

        self.assertEqual(obj1.Do0(), 42)
        self.assertEqual(obj1.Do1(), 31337)
        self.assertRaises(dbus.exceptions.DBusException,
                          obj1.Do2, 31337)

    def test_properties(self):
        '''add and change properties'''

        # no such property
        self.assertRaises(dbus.exceptions.DBusException,
                          self.dbus_props.Get,
                          'org.freedesktop.Test.Main',
                          'version')
        self.assertRaises(dbus.exceptions.DBusException,
                          self.dbus_props.Set,
                          'org.freedesktop.Test.Main',
                          'version',
                          dbus.Int32(2, variant_level=1))

        self.dbus_mock.AddProperty('org.freedesktop.Test.Main',
                                   'version',
                                   dbus.Int32(2, variant_level=1))

        self.assertEqual(self.dbus_props.Get('org.freedesktop.Test.Main', 'version'), 2)

        # change property
        self.dbus_props.Set('org.freedesktop.Test.Main', 'version',
                            dbus.Int32(4, variant_level=1))
        self.assertEqual(self.dbus_props.Get('org.freedesktop.Test.Main', 'version'), 4)

    def test_introspection_methods(self):
        '''dynamically added methods appear in introspection'''

        dbus_introspect = dbus.Interface(self.obj_test, dbus.INTROSPECTABLE_IFACE)

        xml_empty = dbus_introspect.Introspect()
        self.assertTrue('<interface name="org.freedesktop.DBus.Mock">' in xml_empty, xml_empty)
        self.assertTrue('<method name="AddMethod">' in xml_empty, xml_empty)

        self.dbus_mock.AddMethod('Do', 'saiv', 'i', 'ret = 42')

        xml_method = dbus_introspect.Introspect()
        self.assertFalse(xml_empty == xml_method, 'No change from empty XML')
        self.assertTrue('<interface name="org.freedesktop.Test.Main">' in xml_method, xml_method)
        self.assertTrue('''<method name="Do">
      <arg direction="in"  type="s" name="arg1" />
      <arg direction="in"  type="ai" name="arg2" />
      <arg direction="in"  type="v" name="arg3" />
      <arg direction="out" type="i" />
    </method>''' in xml_method, xml_method)

class TestUPower(dbus_mock.DBusTestCase):
    '''Test mocking upowerd'''

    @classmethod
    def setUpClass(klass):
        klass.start_system_bus()
        klass.dbus_con = klass.get_dbus(True)

    def setUp(self):
        self.mock_log = tempfile.NamedTemporaryFile()
        self.p_mock = self.spawn_server('org.freedesktop.UPower',
                                        '/org/freedesktop/UPower',
                                        'org.freedesktop.UPower',
                                        system_bus=True,
                                        stdout=self.mock_log)

        self.obj_upower = self.dbus_con.get_object(
            'org.freedesktop.UPower', '/org/freedesktop/UPower')
        self.dbus_mock = dbus.Interface(self.obj_upower, 'org.freedesktop.DBus.Mock')

        self.dbus_mock.AddMethods([
            ('Suspend', '', '', ''),
            ('EnumerateDevices', '', 'ao', 'ret = objects.keys()'),
            ])

    def tearDown(self):
        self.p_mock.terminate()
        self.p_mock.wait()

    def test_no_devices(self):
        out = subprocess.check_output(['upower', '--dump'], universal_newlines=True)
        self.assertFalse('Device' in out, out)
        self.assertRegex(out, 'on-battery:\s+no')

    def test_one_ac(self):
        self.dbus_mock.AddObject('/org/freedesktop/UPower/devices/mock_AC',
                                 'org.freedesktop.UPower.Device',
                                 {
                                     'PowerSupply': dbus.Boolean(True, variant_level=1),
                                     'Model': dbus.String('Mock AC', variant_level=1),
                                 },
                                 [])

        out = subprocess.check_output(['upower', '--dump'], universal_newlines=True)
        self.assertRegex(out, 'Device: /org/freedesktop/UPower/devices/mock_AC')
        self.assertRegex(out, 'on-battery:\s+no')
        #print('--------- out --------\n%s\n------------' % out)

    def test_suspend(self):
        self.obj_upower.Suspend(dbus_interface='org.freedesktop.UPower')
        with open(self.mock_log.name) as f:
            self.assertRegex(f.read(), '^[0-9.]+ Suspend$')


class TestConsoleKit(dbus_mock.DBusTestCase):
    @classmethod
    def setUpClass(klass):
        klass.start_system_bus()
        klass.dbus_con = klass.get_dbus(True)

    def setUp(self):
        self.p_mock = self.spawn_server('org.freedesktop.ConsoleKit',
                                        '/org/freedesktop/ConsoleKit/Manager',
                                        'org.freedesktop.ConsoleKit.Manager',
                                        system_bus=True,
                                        stdout=subprocess.PIPE)

        self.dbus_mock = dbus.Interface(self.dbus_con.get_object(
            'org.freedesktop.ConsoleKit', '/org/freedesktop/ConsoleKit/Manager'),
            'org.freedesktop.DBus.Mock')

    def tearDown(self):
        self.p_mock.terminate()
        self.p_mock.wait()

    def test_one_active_session(self):
        self.dbus_mock.AddMethods((
            ('GetSessions', '', 'ao', 'ret = ["/org/freedesktop/ConsoleKit/MockSession"]'),
            ('GetCurrentSession', '', 'o', 'ret = "/org/freedesktop/ConsoleKit/MockSession"'),
            ('GetSeats', '', 'ao', 'ret = ["/org/freedesktop/ConsoleKit/MockSeat"]'),
        ))

        self.dbus_mock.AddObject('/org/freedesktop/ConsoleKit/MockSeat',
                                 'org.freedesktop.ConsoleKit.Seat',
                                 {},
                                 [
                                     ('GetSessions', '', 'ao',
                                      'ret = ["/org/freedesktop/ConsoleKit/MockSession"]'),
                                 ])

        self.dbus_mock.AddObject('/org/freedesktop/ConsoleKit/MockSession',
                                 'org.freedesktop.ConsoleKit.Session',
                                 {},
                                 [
                                     ('GetSeatId', '', 'o', 'ret = "/org/freedesktop/ConsoleKit/MockSeat"'),
                                     ('GetUnixUser', '', 'u', 'ret = os.geteuid()'),
                                     ('GetCreationTime', '', 's', 'ret = "2012-01-01T01:23:45.600000Z"'),
                                     ('GetIdleSinceHint', '', 's', 'ret = "2012-01-01T02:23:45.600000Z"'),
                                     ('IsLocal', '', 'b', 'ret = True'),
                                     ('IsActive', '', 'b', 'ret = True'),
                                     ('GetDisplayDevice', '', 's', 'ret = ""'),
                                     ('GetX11DisplayDevice', '', 's', 'ret = "/dev/tty7"'),
                                     ('GetX11Display', '', 's', 'ret = os.environ.get("DISPLAY", "95:0")'),
                                     ('GetRemoteHostName', '', 's', 'ret = ""'),
                                     ('GetSessionType', '', 's', 'ret = ""'),
                                     ('GetLoginSessionId', '', 's', 'ret = "12345"'),
                                 ])

        out = subprocess.check_output(['ck-list-sessions'], universal_newlines=True)
        self.assertRegex(out, '^MockSession:')
        self.assertRegex(out, 'is-local = TRUE')
        self.assertRegex(out, "login-session-id = '12345'")

# avoid writing to stderr
unittest.main(testRunner=unittest.TextTestRunner(stream=sys.stdout, verbosity=2))
